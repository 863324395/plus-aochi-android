apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'org.greenrobot.greendao'
apply plugin: 'jacoco' //测试报告

jacoco {
    toolVersion = "0.7.5.201505241946"
}
android {
    def gConfig = rootProject.extensions.getByName("ext")
    compileSdkVersion gConfig.getAt("compileSdkVersion")
    buildToolsVersion gConfig.getAt("buildToolsVersion")
    defaultConfig {
        applicationId gConfig.getAt("applicationId")
        minSdkVersion gConfig.getAt("minSdkVersion")
        targetSdkVersion gConfig.getAt("targetSdkVersion")
        versionCode gConfig.getAt("versionCode")
        versionName gConfig.getAt("versionName")
        testInstrumentationRunner gConfig.testDependencies.androidJUnitRunner

        ndk {
            //选择要添加的对应cpu类型的.so库。
            abiFilters 'armeabi', 'armeabi-v7a', 'armeabi-v8a', 'x86', 'x86_64', 'mips', 'mips64'
        }
        multiDexEnabled true
    }
    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
    }

    lintOptions {
        quiet true
        abortOnError false
        ignoreWarnings true
        disable 'InvalidPackage'            //Some libraries have issues with this.
        disable 'OldTargetApi'
        //Lint gives this warning but SDK 20 would be Android L Beta.
        disable 'IconDensities'             //For testing purpose. This is safe to remove.
        disable 'IconMissingDensityFolder'  //For testing purpose. This is safe to remove.
    }

    signingConfigs {
        debug {
            storeFile file('../debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }

    buildTypes {

        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
        }
    }

    lintOptions {
        disable 'InvalidPackage'
        disable "ResourceType"
        abortOnError false
    }
    /**
     * 保证 testDebug 执行完成后会执行 testRelease
     * ｛@Link http://g.co/androidstudio/not-mocked｝
     *
     */
    testOptions {
        unitTests.all {
            // All the usual Gradle options.
            jvmArgs '-XX:MaxPermSize=256m'
            // resolve "Method ... not mocked."
        }
        unitTests.returnDefaultValues = true
    }
}
greendao {
    /**
     * daoPackage 生成的DAO，DaoMaster和DaoSession的包名。默认是实体的包名。
     * targetGenDir 生成源文件的路径。默认源文件目录是在build目录中的(build/generated/source/greendao)。
     * generateTests 设置是否自动生成单元测试。
     * targetGenDirTest 生成的单元测试的根目录。
     */
    schemaVersion 1
    //daoPackage 'com.zhiyicx.common.greendao.gen'
    //targetGenDir 'src/main/java'
}
buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
    }
}
configurations.all {
    resolutionStrategy {
        force 'com.android.support:support-annotations:25.0.1'
        force 'com.google.code.findbugs:jsr305:1.3.9'
    }
}
dependencies {
    def dataDependences = rootProject.ext.dataDependencies;
    def testDependences = rootProject.ext.testDependencies;


    compile fileTree(dir: 'libs', include: ['*.jar'])

    // Test
    testCompile testDependences.junit
    androidTestCompile(testDependences.espresso) {
        exclude module: 'support-annotations'
        exclude group: 'javax.inject'
    }
    testCompile testDependences.runner
    testCompile testDependences.robolectric
    testCompile testDependences.mockito
    androidTestApt dataDependences.daggerCompiler
    // Dagger dependencies
    compile dataDependences.dagger
    provided dataDependences.javaxAnnotation
    provided dataDependences.daggerCompiler
    apt dataDependences.daggerCompiler
    // Butterknife
    compile dataDependences.butterknife
    apt dataDependences.butterknifeApt
    // Project
    compile project(":baseproject")

    // database
    compile dataDependences.greendao
    compile dataDependences.greendaoSqlcipher
    //compile dataDependences.greendaoGenerator
    compile 'com.android.support:appcompat-v7:25.0.1'
    compile 'com.android.support:support-v4:25.0.1'
}

task jacocoAndroidTestReport(type:JacocoReport,dependsOn:"connectedAndroidTest"){
    group="Reporting"
    description = "Generate Jacoco coverage reports"

    //exclude auto-generated classes and tests
    def fileFilter=['**/R.class',
                    '**/R$*.class',
                    '**/Manifest*.*',
                    '**/BuildConfig.*',
                    'android/**/*.*',
    ]
    def debugTree=fileTree(dir:
            "${rootDir}/app/build/intermediates/classes/debug",
            excludes: fileFilter)
    def sdkSrc="${rootDir}/app/src/main/java"

    //指明对哪个目录下的代码进行绘制覆盖率统计图标
    sourceDirectories=files([sdkSrc])
    //指明对哪个目录下的代码进行覆盖率统计
    classDirectories=files([debugTree])
    additionalSourceDirs=files([
            "${buildDir}/generated/source/buildConfig/debug",
            "${buildDir}/generated/source/r/debug"
    ])
    executionData=fileTree(dir:project.projectDir,includes:['**/*.exec','**/*.ec'])
    reports{
        xml.enabled=true
        xml.destination="${buildDir}/jacocoTestReport.xml"
        csv.enabled=false
        html.enabled=true
        html.destination="${buildDir}/reports/jacoco"
    }
}

task jacocoTestReport(type: JacocoReport, dependsOn: "testDebugUnitTest") {
    group = "Reporting"
    description = "Generate Jacoco coverage reports"    // exclude auto-generated classes and tests
    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "${project.buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"
    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    additionalSourceDirs = files(["${buildDir}/generated/source/buildConfig/debug", "${buildDir}/generated/source/r/debug"])
    executionData = fileTree(dir: project.projectDir, includes: ['**/*.exec', '**/*.ec'])
    reports {
        xml.enabled = true
        xml.destination = "${buildDir}/jacocoTestReport.xml"
        csv.enabled = false
        html.enabled = true
        html.destination = "${buildDir}/reports/jacoco"
    }
}